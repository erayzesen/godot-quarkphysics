<?xml version="1.0" encoding="UTF-8" ?>
<class name="QSpringObject" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
	You can apply distance constraints between 2 particles using the QSpringObject. The physics engine uses QSpringObject to impose distance constraints between particles in objects already simulated using mass-spring models (e.g. QSoftBodyNode objects). However, if the user wants, they can apply specific distance constraints between any 2 particles using QSpringObject. QWorldNode also provides methods to manage QSpringObject instances.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="configure">
			<return type="QSpringObject" />
			<param index="0" name="particle_object_a" type="QParticleObject" />
			<param index="1" name="particle_object_b" type="QParticleObject" />
			<param index="2" name="length" type="float" />
			<param index="3" name="internal" type="bool" />
			<description>
			Configures a spring connection between two particles with basic features.
			[param particle_object_a]: The QParticleObject instance to be assigned for particle_a.
			[param particle_object_b]: The QParticleObject instance to be assigned for particle_b.
			[param length]: The length of the distance constraint.
			[param internal]: Determines if the spring constraint is an internal element of the mesh structure, if the constraint is for particles within a mesh. You can leave this as false if there's no specific situation requiring you to specify it.
			</description>
		</method>
		<method name="configure_with_current_distance">
			<return type="QSpringObject" />
			<param index="0" name="particle_object_a" type="QParticleObject" />
			<param index="1" name="particle_object_b" type="QParticleObject" />
			<param index="2" name="internal" type="bool" />
			<description>
			Configures a spring connection between two particles with basic features. Configures a spring connection between two particles with basic features. However, it automatically sets the constraint's length parameter based on the current distance between the two particles.
			[param particle_object_a]: The QParticleObject instance to be assigned for particle_a.
			[param particle_object_b]: The QParticleObject instance to be assigned for particle_b.
			[param internal]: Determines if the spring constraint is an internal element of the mesh structure, if the constraint is for particles within a mesh. You can leave this as false if there's no specific situation requiring you to specify it.
			</description>
		</method>
		<method name="get_distance_limit_enabled">
			<return type="bool" />
			<description>
			Returns whether the distance limit is enabled. If set to true, you'll configure coefficients for the minimum and maximum limits of the constrained distance. For example, if the minimum coefficient is 0.5, the constraint ensures the distance doesn't go below half of the constrained distance. If the maximum coefficient is set to 4, it ensures the distance doesn't exceed four times the constrained distance.
			</description>
		</method>
		<method name="get_enabled">
			<return type="bool" />
			<description>
			Returns whether the spring is enabled.
			</description>
		</method>
		<method name="get_is_internal">
			<return type="bool" />
			<description>
			Returns whether the spring is internal. The internal property is generally recommended for use when creating spring connections between particles within a mesh. It should be set to true for spring connections that are part of the internal structure of the mesh, rather than at its boundaries.
			</description>
		</method>
		<method name="get_length">
			<return type="float" />
			<description>
			Returns the length of the spring.
			</description>
		</method>
		<method name="get_maximum_distance_factor">
			<return type="float" />
			<description>
			Returns the maximum distance factor to be enforced when the distance limits feature is enabled.
			</description>
		</method>
		<method name="get_minimum_distance_factor">
			<return type="float" />
			<description>
			Returns the minimum distance factor to be enforced when the distance limits feature is enabled.
			</description>
		</method>
		<method name="get_particle_a">
			<return type="QParticleObject" />
			<description>
			Returns particle_a of the spring.
			</description>
		</method>
		<method name="get_particle_b">
			<return type="QParticleObject" />
			<description>
			Returns particle_b of the spring.
			</description>
		</method>
		<method name="get_rigidity">
			<return type="float" />
			<description>
			Returns the rigidity of the spring.
			</description>
		</method>
		<method name="set_distance_limit_enabled">
			<return type="QSpringObject" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether the distance limit is enabled. If set to true, you'll configure coefficients for the minimum and maximum limits of the constrained distance. For example, if the minimum coefficient is 0.5, the constraint ensures the distance doesn't go below half of the constrained distance. If the maximum coefficient is set to 4, it ensures the distance doesn't exceed four times the constrained distance.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_enabled">
			<return type="QSpringObject" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether the spring is enabled. 
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_is_internal">
			<return type="QSpringObject" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether the spring is internal. The internal property is generally recommended for use when creating spring connections between particles within a mesh. It should be set to true for spring connections that are part of the internal structure of the mesh, rather than at its boundaries.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_length">
			<return type="QSpringObject" />
			<param index="0" name="value" type="float" />
			<description>
			Sets the length of the spring.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_maximum_distance_factor">
			<return type="QSpringObject" />
			<param index="0" name="value" type="float" />
			<description>
			Sets the maximum distance factor to be enforced when the distance limits feature is enabled.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_minimum_distance_factor">
			<return type="QSpringObject" />
			<param index="0" name="value" type="float" />
			<description>
			Returns the minimum distance factor to be enforced when the distance limits feature is enabled.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_particle_a">
			<return type="QSpringObject" />
			<param index="0" name="particle_object" type="QParticleObject" />
			<description>
			Sets particle_a of the spring.
			[param particle_object]: The QParticleObject instance to be assigned.
			</description>
		</method>
		<method name="set_particle_b">
			<return type="QSpringObject" />
			<param index="0" name="particle_object" type="QParticleObject" />
			<description>
			Sets particle_b of the spring.
			[param particle_object]: The QParticleObject instance to be assigned.
			</description>
		</method>
		<method name="set_rigidity">
			<return type="QSpringObject" />
			<param index="0" name="value" type="float" />
			<description>
			Sets the rigidity of the spring.
			[param value]: A value to set.
			</description>
		</method>
	</methods>
</class>
