<?xml version="1.0" encoding="UTF-8" ?>
<class name="QParticleObject" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
		QParticleObject instances form the network structure used by QMeshNode objects across all body types. They are the smallest building blocks of the physics simulation and are handled differently depending on the body type. For example, in QRigidBodyNode objects, particles are collectively constrained to positions calculated from the body's current properties. In contrast, in soft body objects, simulation particles are manipulated individually and can move freely, with their movements determining the next steps of the simulation. The QMeshNode class offers a number of methods to manage particles. For more information about constraints between particles in soft bodies, refer to the QSpringObject.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_force">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Adds a value to the force of the particle. Set forces determine the force to be applied to a particle object at the next physics frame from the current frame.  
				[param value]: A value to be added.
			</description>
		</method>
		<method name="add_global_position">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Adds a value to the global position of the particle. 
				[param value]: A value to be added.
			</description>
		</method>
		<method name="add_position">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Adds a value to the local position of the particle.
				[param value]: A value to be added.
			</description>
		</method>
		<method name="add_previous_global_position">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Adds a value to the previous global position of the particle. 
				[param value]: A value to be added.
			</description>
		</method>
		<method name="apply_force">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Applies a force directly to the particle. This is independent of the particle's force property, which can be set or modified using [method add_force] or [method set_force], and is applied in the next frame
				[param value]: The value of the force to be applied.
			</description>
		</method>
		<method name="configure">
			<return type="QParticleObject" />
			<param index="0" name="position" type="Vector2" />
			<param index="1" name="radius" type="float" />
			<description>
				Configures the particle object with basic settings.
				[param position]: The local position of the particle. 
				[param radius]: The radius of the particle.
			</description>
		</method>
		<method name="get_enabled">
			<return type="bool" />
			<description>
				Returns whether the particle is enabled. Disabled particles are not exempt from the collision tests that involve the meshes they belong to, but the solutions of their manifolds are not applied. Additionally, in body types where particles can move freely individually (e.g., QSoftBody), force and velocity integrations are not applied.
				[b]note:[/b] Disabled particles in QRigidBody objects may appear to move, because they are transformed based on the rigid body's position and rotation, and their positions are updated directly.
			</description>
		</method>
		<method name="get_force">
			<return type="Vector2" />
			<description>
				Returns the current force value of the particle.
			</description>
		</method>
		<method name="get_global_position">
			<return type="Vector2" />
			<description>
				Returns the global position of the particle.
			</description>
		</method>
		<method name="get_is_internal">
			<return type="bool" />
			<description>
				Returns whether the particle is internal. Internal particle definition is used not for the particles that define the collision boundaries of a mesh, but for the grid particles inside these boundaries. This feature is important for simulation types that require different internal particle simulation, such as volume preserved soft bodies.
			</description>
		</method>
		<method name="get_is_lazy">
			<return type="bool" />
			<description>
				Returns whether the particle's lazy feature is enabled. This feature allows the particle to react once in a one-sided manner when colliding with an object; after that, it won't react again until it exits and re-enters the collision. This feature is used for particles that lightly interact with surrounding objects when necessary.
			</description>
		</method>
		<method name="get_mass">
			<return type="float" />
			<description>
				Returns the mass of the particle.
			</description>
		</method>
		<method name="get_owner_mesh_node">
			<return type="QMeshNode" />
			<description>
				Returns owner mesh of the particle. The Owner mesh is the mesh in which the particle is appointed.
			</description>
		</method>
		<method name="get_position">
			<return type="Vector2" />
			<description>
				Returns the local position of the particle.
			</description>
		</method>
		<method name="get_previous_global_position">
			<return type="Vector2" />
			<description>
				Returns the previous global position of the particle.
			</description>
		</method>
		<method name="get_radius">
			<return type="float" />
			<description>
				Returns the radius of the particle.
			</description>
		</method>
		<method name="set_enabled">
			<return type="QParticleObject" />
			<param index="0" name="value" type="bool" />
			<description>
				Sets whether the particle is enabled. Disabled particles are not exempt from the collision tests that involve the meshes they belong to, but the solutions of their manifolds are not applied. Additionally, in body types where particles can move freely individually (e.g., QSoftBody), force and velocity integrations are not applied.
				[param value]: A value to set.
			</description>
		</method>
		<method name="set_force">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Sets the force value of the particle. Set forces determine the force to be applied to a particle object at the next physics step from the current step. 
				[param value]: A value to set.
			</description>
		</method>
		<method name="set_global_position">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Sets the global position of the particle.
				[param value]: A value to set.
			</description>
		</method>
		<method name="set_is_internal">
			<return type="QParticleObject" />
			<param index="0" name="value" type="bool" />
			<description>
				Sets whether the particle is internal.Internal particle definition is used not for the particles that define the collision boundaries of a mesh, but for the grid particles inside these boundaries. This feature is important for simulation types that require different internal particle simulation, such as volume preserved soft bodies.
				[param value]: A value to set.
			</description>
		</method>
		<method name="set_is_lazy">
			<return type="QParticleObject" />
			<param index="0" name="value" type="bool" />
			<description>
				Sets whether the particle's lazy feature is enabled. This feature allows the particle to react once in a one-sided manner when colliding with an object; after that, it won't react again until it exits and re-enters the collision. This feature is used for particles that lightly interact with surrounding objects when necessary.
				[param value]: A value to set.
			</description>
		</method>
		<method name="set_mass">
			<return type="QParticleObject" />
			<param index="0" name="value" type="float" />
			<description>
				Sets the mass of the particle
				[param value]: A value to set.
			</description>
		</method>
		<method name="set_position">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Sets local position of the particle.
				[param value]: A value to set.
			</description>
		</method>
		<method name="set_previous_global_position">
			<return type="QParticleObject" />
			<param index="0" name="value" type="Vector2" />
			<description>
				Sets the previous global position of the particle. 
				[param value]: A value to set.
			</description>
		</method>
		<method name="set_radius">
			<return type="QParticleObject" />
			<param index="0" name="value" type="float" />
			<description>
				Sets the radius of the particle.
				[param value]: A value to set.
			</description>
		</method>
	</methods>
</class>
