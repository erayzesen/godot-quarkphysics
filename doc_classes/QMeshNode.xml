<?xml version="1.0" encoding="UTF-8" ?>
<class name="QMeshNode" inherits="Node2D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
	Every QBodyNode object requires QMeshNode objects as its children in the scene tree. QMeshNode is the class where particles, springs, collision polygon, and UV maps are defined and managed for all physics dynamics. In the Godot integration, it might seem like there are different types of QMeshNode classes, but in the original QuarkPhysics structure, there's only one QMesh class. However, this class also includes methods to generate primitive shapes like rectangles, polygons, and circles at runtime.
	In the Godot integration, we've separated this structure into subtypes inheriting from QMeshNode, such as QMeshRectNode, QMeshPolygonNode, QMeshCircleNode, and QMeshAdvancedNode. It's important to remember, however, that these child objects of QMeshNode only serve to adjust the mesh design within the editor, which would originally be generated by the QMesh class in the original API. The data prepared with your settings is used to create the mesh when the QMeshNode is added to the scene. This means, for example, if you change the size values of a rectangle in a QMeshRectNode object after it's been added to the scene at runtime, you won't see an effect.
	Once a QMeshNode is added to your scene and the initial mesh is created after your game starts, you'll be left with methods to modify the particles, springs, polygon, and UV maps of the QMeshNode class for any subsequent changes. While this might seem a bit confusing at first, the good news is that no matter what mesh you design, it's ultimately a QMesh, and they're all managed the same way. They have particles, springs, a polygon, and UV maps. Furthermore, you can create a QMeshNode class entirely with code at runtime and generate particles, springs, polygons, and UV maps purely through code. Additionally, you can use QMeshAdvancedNode with the QMeshEditor plugin to create custom and detailed meshes directly through the Godot interface.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_angle_constraint">
			<return type="QMeshNode" />
			<param index="0" name="angle_constraint_object" type="QAngleConstraintObject" />
			<description>
			Adds an angle constraint to mesh.
			[param angle_constraint_object]: AngleConstraintObject to be added.
			</description>
		</method>
		<method name="add_particle">
			<return type="QMeshNode" />
			<param index="0" name="particle_object" type="QParticleObject" />
			<description>
			Adds a particle to the mesh.
			[param particle]: QParticleObject to be added.
			</description>
		</method>
		<method name="add_particle_to_polygon">
			<return type="QMeshNode" />
			<param index="0" name="particle_object" type="QParticleObject" />
			<description>
			Adds a particle of the mesh to the polygon. If you want to add a particle to the end of the polygon, set the position value as -1.
			[param particle_object]: QParticleObject to be added.
			</description>
		</method>
		<method name="add_spring">
			<return type="QMeshNode" />
			<param index="0" name="spring_object" type="QSpringObject" />
			<description>
			 Adds a spring to the mesh.
			 [param spring_object]: QSpringObject to be added. 
			</description>
		</method>
		<method name="add_uv_map">
			<return type="QMeshNode" />
			<param index="0" name="map" type="PackedInt32Array" />
			<description>
			Adds a UV map to the mesh. UV maps are composed of polygons defined by the index numbers of QMeshNode's particles. These polygons must be defined in a clockwise order.
			[param map]: A particle index collection to be added.
			</description>
		</method>
		<method name="get_aabb_of_polygon">
			<return type="Rect2" />
			<param index="0" name="polygon_points" type="PackedVector2Array" />
			<description>
			Returns the AABB of a polygon given as an array of Vector2 points.
			[param polygon_points]: A polygon defined as a PackedVector2Array.
			</description>
		</method>
		<method name="get_angle_constraint_at">
			<return type="QAngleConstraintObject" />
			<param index="0" name="index" type="int" />
			<description>
			Returns the angle constraint at the specified index.
			[param index]: The index of the QAngleConstraintObject.
			</description>
		</method>
		<method name="get_angle_constraint_count">
			<return type="int" />
			<description>
			Returns the count of the angle constraints. 
			</description>
		</method>
		<method name="get_angle_constraint_index">
			<return type="int" />
			<param index="0" name="angle_constraint_object" type="QAngleConstraintObject" />
			<description>
			Returns the index of the specified angle constraint.
			[param angle_constraint_object]: QAngleConstraintObject in the mesh.
			</description>
		</method>
		<method name="get_area">
			<return type="float" />
			<description>
			Returns total area of the mesh with global positions of particles
			</description>
		</method>
		<method name="get_average_position">
			<return type="Vector2" />
			<description>
			Returns the averaged position calculated from the global positions of the particles of the mesh.
			</description>
		</method>
		<method name="get_average_position_and_rotation">
			<return type="Array" />
			<param index="0" name="particle_collection" type="QParticleObject[]" />
			<description>
			Calculates the average position and rotation values of the specified particles. 
			[param particle_collection]: A collection of QParticleObject instances.
			</description>
		</method>
		<method name="get_average_rotation">
			<return type="float" />
			<description>
			Returns the average rotation angle in radians, computed by comparing the current global positions of the moving particles to their initial positions.
			</description>
		</method>
		<method name="get_circumference">
			<return type="float" />
			<description>
			Returns total circumference of the polygon of the mesh (Calculates with local positions of particles)
			</description>
		</method>
		<method name="get_curved_polygon_points">
			<return type="PackedVector2Array" />
			<param index="0" name="polygon_points" type="PackedVector2Array" />
			<param index="1" name="curve_amount" type="float" />
			<param index="2" name="margin" type="float" />
			<param index="3" name="origin" type="Vector2" />
			<param index="4" name="bake_interval" type="float" />
			<description>
			Returns the curved version of a defined polygon based on the given parameters. The input polygon must be a PackedVector2Array and defined in a clockwise order.
			[param polygon_points]: A PackedVector2Array to be converted.
			[param curve_amount]: The distance of control points from the polygon vertices for curvature.
			[param margin]: The margin amount relative to the origin point of the newly generated polygon.
			[param origin]: The origin point to be used as a reference for the polygon points. 
			[param bake_interval]: The distance in pixels between two adjacent cached points.
			</description>
		</method>
		<method name="get_decomposited_polygon">
			<return type="Array" />
			<description>
			Performs Godot's built-in decomposition process using the points of the polygon defined in the mesh. If successful, returns an array of polygons in PackedVector2Array format, each representing a convex piece. If unsuccessful, returns an empty array.
			</description>
		</method>
		<method name="get_initial_area">
			<return type="float" />
			<description>
			Returns the total area of the mesh with local positions of particles.
			</description>
		</method>
		<method name="get_initial_polygon_area">
			<return type="float" />
			<description>
			Returns the total polygon area of the mesh with local positions of particles.
			</description>
		</method>
		<method name="get_inner_shadow_of_polygon">
			<return type="PackedVector2Array" />
			<param index="0" name="polygon_points" type="PackedVector2Array" />
			<param index="1" name="offset" type="Vector2" />
			<description>
			Generates a polygon to create an inner shadow effect for a polygon defined by the given PackedVector2Array. The operation involves clipping the original polygon with a copy offset by the specified vector.
			[param polygon_points]: A polygon defined as a PackedVector2Array.
			[param offset]: The offset amount, in Vector2.
			</description>
		</method>
		<method name="get_matching_particle_positions">
			<return type="Array" />
			<param index="0" name="particle_collection" type="QParticleObject[]" />
			<param index="1" name="target_position" type="Vector2" />
			<param index="2" name="target_rotation" type="float" />
			<description>
			Local positions from the given QParticleObject collection are taken as a point collection. The target position and target rotation are applied. The positions of the resulting points are returned as a PackedVector2Array collection.
			[param particle_collection]: The QParticleObject collection to be used in the calculation.
			[param target_position]: The target position to be calculated.
			[param target_rotation]: The target rotation to be calculated.
			</description>
		</method>
		<method name="get_mesh_global_position">
			<return type="Vector2" />
			<description>
			Returns the position of the mesh in the physics world.
			</description>
		</method>
		<method name="get_mesh_global_rotation">
			<return type="float" />
			<description>
			Returns the rotation of the mesh in the physics world.
			</description>
		</method>
		<method name="get_mesh_position">
			<return type="Vector2" />
			<description>
			Returns the local position relative to the QBodyNode.
			</description>
		</method>
		<method name="get_mesh_rotation">
			<return type="float" />
			<description>
			Returns the local rotation relative to the QBodyNode.
			</description>
		</method>
		<method name="get_min_angle_constraint_of_polygon">
			<return type="float" />
			<description>
			Returns the minimum angle for the angle constraints of the polygon. If the constraints are disabled, the value will be 0.
			</description>
		</method>
		<method name="get_owner_body_node">
			<return type="QBodyNode" />
			<description>
			Returns owner QBodyNode of the mesh. 
			</description>
		</method>
		<method name="get_particle_at">
			<return type="QParticleObject" />
			<param index="0" name="index" type="int" />
			<description>
			Returns a particle at the specified index.
			[param index]:  The index of QParticleObject in the mesh.
			</description>
		</method>
		<method name="get_particle_count">
			<return type="int" />
			<description>
			Returns the total particle count in the mesh.
			</description>
		</method>
		<method name="get_particle_from_polygon">
			<return type="QParticleObject" />
			<param index="0" name="index" type="int" />
			<description>
			Returns a particle of the polygon at the specified index.
			</description>
		</method>
		<method name="get_particle_index">
			<return type="int" />
			<param index="0" name="particle_object" type="QParticleObject" />
			<description>
			Returns the index of the specified particle.
			[param particle_object]: QParticleObject in the mesh.
			</description>
		</method>
		<method name="get_polygon_area">
			<return type="float" />
			<description>
			Returns the area of the polygon of the mesh.
			</description>
		</method>
		<method name="get_polygon_particle_count">
			<return type="int" />
			<description>
			Returns the  total particle count of the polygon.
			</description>
		</method>
		<method name="get_specified_side_points_of_polygon">
			<return type="PackedVector2Array" />
			<param index="0" name="polygon_points" type="PackedVector2Array" />
			<param index="1" name="axis" type="Vector2" />
			<param index="2" name="points_count_range" type="int" />
			<param index="3" name="scale" type="float" />
			<param index="4" name="origin" type="Vector2" />
			<description>
			Returns the edge points of the given PackedVector2Array polygon that face the specified axis.
			[param polygon_points]: The polygon defined as a PackedVector2Array.
			[param axis]: The axis defined by a Vector2.
			[param points_count_range]: The maximum number of points to find.
			[param scale]: The scale value to apply to the found points relative to the defined origin.
			[param origin]: The origin point of the polygon.
			</description>
		</method>
		<method name="get_spring_at">
			<return type="QSpringObject" />
			<param index="0" name="index" type="int" />
			<description>
			Returns the spring at the specified index.
			[param index] : The index of QSpringObject.
			</description>
		</method>
		<method name="get_spring_count">
			<return type="int" />
			<description>
			Returns the total spring count in the mesh.
			</description>
		</method>
		<method name="get_spring_index">
			<return type="int" />
			<param index="0" name="spring_object" type="QSpringObject" />
			<description>
			Returns the index of the specified spring.
			[param spring_object]: QSpringObject in the mesh.
			</description>
		</method>
		<method name="get_uv_map_at">
			<return type="PackedInt32Array" />
			<param index="0" name="index" type="int" />
			<description>
			Returns the UV map at the specified index.
			[param index]: The index of the UV map.
			</description>
		</method>
		<method name="get_uv_map_count">
			<return type="int" />
			<description>
			Returns the count of the UV maps.
			</description>
		</method>
		<method name="remove_angle_constraint">
			<return type="QMeshNode" />
			<param index="0" name="angle_constraint_object" type="QAngleConstraintObject" />
			<description>
			Removes an angle constraint to the mesh.
			[param angle_constraint_object]: QAngleConstraintObject in the mesh.
			</description>
		</method>
		<method name="remove_angle_constraint_at">
			<return type="QMeshNode" />
			<param index="0" name="index" type="int" />
			<description>
			Removes an angle constraint to the mesh at the specified index.
			[param index]: The index of QAngleConstraintObject in the mesh.
			</description>
		</method>
		<method name="remove_particle">
			<return type="QMeshNode" />
			<param index="0" name="particle_object" type="QParticleObject" />
			<description>
			Removes a particle from the mesh.
			[param particle_object]: QParticleObject in the mesh.
			</description>
		</method>
		<method name="remove_particle_at">
			<return type="QMeshNode" />
			<param index="0" name="index" type="int" />
			<description>
			Removes the particle from the mesh at the specified index.
			[param index]: The index of QParticleObject in the mesh.
			</description>
		</method>
		<method name="remove_particle_from_polygon">
			<return type="QMeshNode" />
			<param index="0" name="particle_object" type="QParticleObject" />
			<description>
			Removes a particle from to the polygon.
			[param particle_object]: QParticleObject in the mesh.
			</description>
		</method>
		<method name="remove_particle_from_polygon_at">
			<return type="QMeshNode" />
			<param index="0" name="index" type="int" />
			<description>
			Removes a particle from to the polygon at the specified index. 
			[param index]: The index of QParticleObject in the mesh.
			</description>
		</method>
		<method name="remove_polygon">
			<return type="QMeshNode" />
			<description>
			Cleans the mesh's polygon and also removes sub-convex polygons.
			</description>
		</method>
		<method name="remove_spring">
			<return type="QMeshNode" />
			<param index="0" name="spring_object" type="QSpringObject" />
			<description>
			Removes a spring to the mesh.
			[param spring_object]: QSpringObject in the mesh.
			</description>
		</method>
		<method name="remove_spring_at">
			<return type="QMeshNode" />
			<param index="0" name="index" type="int" />
			<description>
			Removes a spring to the mesh at the specified index.
			[param index]: The index of the QSpringObject.
			</description>
		</method>
		<method name="remove_uv_map_at">
			<return type="QMeshNode" />
			<param index="0" name="index" type="int" />
			<description>
			Removes a UV map to the mesh at the specified index.
			[param index]: The index of the UV map in the mesh.
			</description>
		</method>
		<method name="set_antialias_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether the antialiasing feature will be enabled or disabled during rendering operations.
			</description>
		</method>
		<method name="set_curve_length">
			<return type="QMeshNode" />
			<param index="0" name="value" type="float" />
			<description>
			Sets the distance of the control points from the polygon points for the curve property, to be applied in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_curved_corners_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether the curve property will be applied to polygon corners during vector rendering operations. If set to true, curves will be applied to the edges based on the [member curve_length] property.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_fill_color">
			<return type="QMeshNode" />
			<param index="0" name="value" type="Color" />
			<description>
			Sets the fill color to be applied in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_fill_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether a fill color will be applied in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_fill_texture">
			<return type="QMeshNode" />
			<param index="0" name="texture" type="Texture2D" />
			<description>
			Sets the fill texture to be applied in vector rendering operations.
			[param value]: A texture to set.
			</description>
		</method>
		<method name="set_fill_texture_offset">
			<return type="QMeshNode" />
			<param index="0" name="value" type="Vector2" />
			<description>
			Sets the position offset for the fill texture to be applied in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_fill_texture_scale">
			<return type="QMeshNode" />
			<param index="0" name="value" type="float" />
			<description>
			Sets the scale for the fill texture to be applied in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_mesh_global_position">
			<return type="QMeshNode" />
			<param index="0" name="_unnamed_arg0" type="Vector2" />
			<description>
			Sets the global position of the mesh.  You generally won't need to use this except in very exceptional circumstances.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_mesh_position">
			<return type="QMeshNode" />
			<param index="0" name="_unnamed_arg0" type="Vector2" />
			<description>
			Sets the local position of the mesh. You generally won't need to use this except in very exceptional circumstances.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_mesh_rotation">
			<return type="QMeshNode" />
			<param index="0" name="_unnamed_arg0" type="float" />
			<description>
			Sets the rotation of the mesh.
			[param value]: A rotation value in radian.You generally won't need to use this except in very exceptional circumstances.
			</description>
		</method>
		<method name="set_min_angle_constraint_of_polygon">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets the minimum angle for the angle constraints of the polygon. If the value is 0, it means constraints are disabled. 
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_particle_rendering_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether particles with a defined radius within the mesh will be included in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_polygon">
			<return type="QMeshNode" />
			<param index="0" name="particle_collection" type="QParticleObject[]" />
			<description>
			Sets a polygon defined by the QParticleObjects within the mesh's particle collection as the mesh's polygon. The polygon in question must be defined in a clockwise direction.
			[param particle_collection]: The polygon array created with QParticleObject.
			</description>
		</method>
		<method name="set_polygon_for_collision_disabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether the polygon defined for the mesh will be included in collisions. If the polygon is excluded from collisions, only the particles will participate in collisions.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_show_particle_index_numbers_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether particle numbers will be displayed in the editor.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_show_polygon_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether polygons will be displayed for the mesh renderer in the editor.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_show_springs_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether springs will be displayed for the mesh renderer in the editor.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_stretching_texture_to_polygon_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether the size of the fill texture should be used as a reference when mapping it to the QMeshNode in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_stroke_color">
			<return type="QMeshNode" />
			<param index="0" name="value" type="Color" />
			<description>
			Sets the stroke color for vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_stroke_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			Sets whether the stroke feature will be active in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_stroke_offset">
			<return type="QMeshNode" />
			<param index="0" name="value" type="float" />
			<description>
			Sets the offset of the stroke relative to the polygon's edges when the stroke feature is applied in vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_stroke_width">
			<return type="QMeshNode" />
			<param index="0" name="value" type="float" />
			<description>
			Sets the stroke thickness for vector rendering operations.
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_triangulation_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			In vector rendering operations, this attempts to fix polygons before rendering them when they become complex. 
			[param value]: A value to set.
			</description>
		</method>
		<method name="set_vector_rendering_enabled">
			<return type="QMeshNode" />
			<param index="0" name="value" type="bool" />
			<description>
			QMeshNode objects can be rendered in real-time every frame with properties like fill colors, textures, and strokes. This can be essential, especially for soft body dynamics where continuous deformation occurs. However, for objects where the mesh remains static (e.g., in rigid body dynamics), using Godot's Sprite nodes will be more performant. This is because QMeshNode rendering involves additional calculations every frame.
			[param value]: A value to set.
			</description>
		</method>
	</methods>
	<members>
		<member name="antialias" type="bool" setter="set_antialias_enabled" getter="get_antialias_enabled" default="true">
		Sets whether the antialiasing feature will be enabled or disabled during rendering operations.
		</member>
		<member name="curve_length" type="float" setter="set_curve_length" getter="get_curve_length" default="8.0">
		Sets the distance of the control points from the polygon points for the curve property, to be applied in vector rendering operations.
		</member>
		<member name="data_internal_springs" type="PackedInt32Array[]" setter="set_data_internal_springs" getter="get_data_internal_springs" default="[]">
		</member>
		<member name="data_particle_is_enabled" type="PackedByteArray" setter="set_data_particle_is_enabled" getter="get_data_particle_is_enabled" default="PackedByteArray()">
		</member>
		<member name="data_particle_is_internal" type="PackedByteArray" setter="set_data_particle_is_internal" getter="get_data_particle_is_internal" default="PackedByteArray()">
		</member>
		<member name="data_particle_is_lazy" type="PackedByteArray" setter="set_data_particle_is_lazy" getter="get_data_particle_is_lazy" default="PackedByteArray()">
		</member>
		<member name="data_particle_positions" type="PackedVector2Array" setter="set_data_particle_positions" getter="get_data_particle_positions" default="PackedVector2Array()">
		</member>
		<member name="data_particle_radius" type="PackedFloat32Array" setter="set_data_particle_radius" getter="get_data_particle_radius" default="PackedFloat32Array()">
		</member>
		<member name="data_polygon" type="PackedInt32Array" setter="set_data_polygon" getter="get_data_polygon" default="PackedInt32Array()">
		</member>
		<member name="data_springs" type="PackedInt32Array[]" setter="set_data_springs" getter="get_data_springs" default="[]">
		</member>
		<member name="data_uv_maps" type="PackedInt32Array[]" setter="set_data_uv_maps" getter="get_data_uv_maps" default="[]">
		</member>
		<member name="disable_polygon_for_collisions" type="bool" setter="set_polygon_for_collision_disabled" getter="get_polygon_for_collision_disabled" default="false">
		Sets whether the polygon defined for the mesh will be included in collisions. If the polygon is excluded from collisions, only the particles will participate in collisions.
		</member>
		<member name="enable_curved_corners" type="bool" setter="set_curved_corners_enabled" getter="get_curved_corners_enabled" default="false">
		Sets whether the curve property will be applied to polygon corners during vector rendering operations. If set to true, curves will be applied to the edges based on the [member curve_length] property.
		</member>
		<member name="enable_fill" type="bool" setter="set_fill_enabled" getter="get_fill_enabled" default="true">
		Sets whether a fill color will be applied in vector rendering operations.
		</member>
		<member name="enable_particle_rendering" type="bool" setter="set_particle_rendering_enabled" getter="get_particle_rendering_enabled" default="true">
		Sets whether particles with a defined radius within the mesh will be included in vector rendering operations.
		</member>
		<member name="enable_stretching_texture_to_polygon" type="bool" setter="set_stretching_texture_to_polygon_enabled" getter="get_stretching_texture_to_polygon_enabled" default="true">
		Sets whether the size of the fill texture should be used as a reference when mapping it to the QMeshNode in vector rendering operations.
		</member>
		<member name="enable_stroke" type="bool" setter="set_stroke_enabled" getter="get_stroke_enabled" default="false">
		Sets whether the stroke feature will be active in vector rendering operations.
		</member>
		<member name="enable_vector_rendering" type="bool" setter="set_vector_rendering_enabled" getter="get_vector_rendering_enabled" default="false">
		QMeshNode objects can be rendered in real-time every frame with properties like fill colors, textures, and strokes. This can be essential, especially for soft body dynamics where continuous deformation occurs. However, for objects where the mesh remains static (e.g., in rigid body dynamics), using Godot's Sprite nodes will be more performant. This is because QMeshNode rendering involves additional calculations every frame.
		</member>
		<member name="fill_color" type="Color" setter="set_fill_color" getter="get_fill_color" default="Color(1, 1, 1, 1)">
		Sets the fill color to be applied in vector rendering operations.
		</member>
		<member name="fill_texture" type="Texture2D" setter="set_fill_texture" getter="get_fill_texture">
		Sets the fill texture to be applied in vector rendering operations.
		</member>
		<member name="fill_texture_offset" type="Vector2" setter="set_fill_texture_offset" getter="get_fill_texture_offset" default="Vector2(0, 0)">
		Sets the position offset for the fill texture to be applied in vector rendering operations.
		</member>
		<member name="fill_texture_scale" type="float" setter="set_fill_texture_scale" getter="get_fill_texture_scale" default="1.0">
		Sets the scale for the fill texture to be applied in vector rendering operations.
		</member>
		<member name="show_particle_index_numbers" type="bool" setter="set_show_particle_index_numbers_enabled" getter="get_show_particle_index_numbers_enabled" default="false">
		Sets whether particle numbers will be displayed in the editor.
		</member>
		<member name="show_polygons" type="bool" setter="set_show_polygon_enabled" getter="get_show_polygon_enabled" default="true">
		Sets whether polygons will be displayed for the mesh renderer in the editor.
		</member>
		<member name="show_springs" type="bool" setter="set_show_springs_enabled" getter="get_show_springs_enabled" default="true">
		Sets whether springs will be displayed for the mesh renderer in the editor.
		</member>
		<member name="stroke_color" type="Color" setter="set_stroke_color" getter="get_stroke_color" default="Color(0, 0, 0, 1)">
		Sets the stroke color for vector rendering operations.
		</member>
		<member name="stroke_offset" type="float" setter="set_stroke_offset" getter="get_stroke_offset" default="0.0">
		Sets the offset of the stroke relative to the polygon's edges when the stroke feature is applied in vector rendering operations.
		</member>
		<member name="stroke_width" type="float" setter="set_stroke_width" getter="get_stroke_width" default="3.0">
		Sets the stroke thickness for vector rendering operations.
		</member>
		<member name="triangulation" type="bool" setter="set_triangulation_enabled" getter="get_triangulation_enabled" default="false">
		In vector rendering operations, this attempts to fix polygons before rendering them when they become complex. 
		</member>
	</members>
</class>
